version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.6

executors:
  base:
    docker:
      - image: cimg/node:14.19

commands:
  install-node-packages:
    description: Install node packages
    steps:
      - restore_cache:
          key: node-cache-v1-{{ checksum "package-lock.json" }}
      - run:
          name: Install node packages
          command: npm install
      - save_cache:
          paths:
            - ./node_modules
          key: node-cache-v1-{{ checksum "package-lock.json" }}
  build-and-push:
    description: Build and push code to S3 bucket
    parameters:
      client_id:
        type: string
        default: ''
      gtm_id:
        type: string
        default: ''
      bucket_name:
        type: string
        default: ''
      distribution_id:
        type: string
        default: ''
    steps:
      - run:
          name: Build code
          command: API_KEY="" CLIENT_ID=<< parameters.client_id >> GTM_ID=<< parameters.gtm_id >> npm run build
      - aws-cli/setup
      - run:
          name: Sync build artifacts to S3
          command: aws s3 cp --recursive --acl public-read dist 's3://<< parameters.bucket_name >>/'
      - run:
          name: Create invalidation in CloudFront
          command: aws cloudfront create-invalidation --distribution-id << parameters.distribution_id >> --paths '/*'

jobs:
  tests:
    executor: base
    steps:
      - checkout
      - install-node-packages
      - run:
          name: Run linter and unit tests with coverage
          command: npm run quality
      - run:
          name: Run e2e test cases
          command: ./run_e2e_tests.sh $DEV_API_KEY $DEV_CLIENT_ID $DEV_TEST_URL
  dev-deployment:
    executor: base
    steps:
      - checkout
      - install-node-packages
      - build-and-push:
          client_id: $DEV_CLIENT_ID
          gtm_id: $DEV_GTM_ID
          bucket_name: $DEV_BUCKET_NAME
          distribution_id: $DEV_DISTRIBUTION_ID
  prod-deployment:
    executor: base
    steps:
      - checkout
      - install-node-packages
      - build-and-push:
          client_id: $PROD_CLIENT_ID
          gtm_id: $PROD_GTM_ID
          bucket_name: $PROD_BUCKET_NAME
          distribution_id: $PROD_DISTRIBUTION_ID
      - run:
          name: Build and push Docker image to DockerHub
          command: ./docker_push.sh
  tests-pull-requests:
    executor: base
    steps:
      - checkout
      - install-node-packages
      - run:
          name: Run linter and unit tests with coverage
          command: npm run quality

workflows:
  main:
    jobs:
      - tests:
          filters:
            branches:
              only: circle-ci-setup
      - dev-deployment:
          requires:
            - tests
      - approve-prod-deployment:
          type: approval
          requires:
            - dev-deployment
      - prod-deployment:
          requires:
            - approve-prod-deployment
  pull_requests:
    jobs:
      - tests-pull-requests:
          filters:
            branches:
              ignore: circle-ci-setup
